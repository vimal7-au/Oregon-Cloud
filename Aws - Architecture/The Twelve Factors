The Twelve Factors
#	Factor	Description
1	Codebase:
There should be exactly one codebase for a deployed service with the codebase being used for many deployments.

2	Dependencies:
All dependencies should be declared, with no implicit reliance on system tools or libraries.

3	Config:
Configuration that varies between deployments should be stored in the environment.

4	Backing services:
All backing services are treated as attached resources and attached and detached by the execution environment.

This is a common practice already and not something that professional developers get wrong often. The idea is that your services should be easily interchangeable. If you are referencing them as simple urls with login credentials there is no reason why they shouldn’t be. This will ensure good portability and helps maintain your system.


5	Build, release, run	The delivery pipeline should strictly consist of build, release, run.

6	Processes:
Applications should be deployed as one or more stateless processes with persisted data stored on a backing service.
Execute the app as one or more stateless processes

This is another factor, that is at the core of microservices architecture. The idea of stateless services, that can be easily scaled by deploying more of them is part of the definition what a microservices are. You should not be introducing state into your services (



7	Port binding:
Self-contained services should make themselves available to other services by specified ports.

8	Concurrency:
Concurrency is advocated by scaling individual processes.
As the headline says- this is all about scalability. Tools such as kubernetes can really help you here. The idea is that, as you need to scale, you should be deploying more copies of your application (processes) rather than trying to make your application larger (by running a single instance on the most powerful machine available). Practice has shown that this is simpler and more resilient approach to do it. Some may argue that the word micro in the microservices hints at this as well (beside the services being small code-wise).



9	Disposability:
Fast startup and shutdown are advocated for a more robust and resilient system.

10	Dev/Prod:
parity	All environments should be as similar as possible.
Keep development, staging, and production as similar as possible

The differences between dev and prod can be significantly larger than people realise. It goes beyond the configuration and data, but also includes:


11	Logs:
Applications should produce logs as event streams and leave the execution environment to aggregate.
Bringing Splunk or Logstash/ELK Stack to help with your logs, can bring dramatic gains. My experience with Splunk changed QA debugging from a dreaded activity (with many microservices in place) to something that I actually enjoyed!

Trends, alerts, heuristic, monitoring- all of these can come from well design logs, treated as event streams and captured by one of these technologies. Don’t miss out on that!


12	Admin Processes:
Any needed admin tasks should be kept in source control and packaged with the application.




https://www.slideshare.net/AmazonWebServices/building-microservices-with-the-12-factor-app-pattern-on-aws